/*退出循环
作用：满足指定条件，可以退出循环
break：终止整个循环
continue：退出当前一次循环的执行，继续执行下一次循环
*/
// 这个也没什么好说的，都一样，直接上手就行了

//一共8个包子，吃到第5个，饱了
for (let i: number = 1; i <= 8; i++){
  if(i = 5) {
    console.log("拿起了第5个包子，发现吃不动了")
    //终止当前的循环（本次循环后面的代码不执行了，
    break
  }
  console.log("吃包子:", `第${i}个`)
}
console.log("这是循环外的代码")

// 2.一个8个包子，吃到第5个，坏了
for (let i: number = 1; i <= 8; i++){
  if (i == 5) {
    console.log("拿起了第5个包子，发现坏了")
    // 当前这次循环不继续执行了，继续执行下一次循环
    continue
  }
  console.log("吃包子:", `第${i}个`)
}
console.log("这是循环外的代码")

// 如果判断语句写错就惨了if (i == 5) 我写成了if (i = 5)他就一直循环
// 这是因为i = 5是一个赋值语句且这个语句即条件永远为true，因为每次进入if都会把i变成5，所以会无限循环

// 退出循环-练习
// 需求1：打印1-100的数字，遇到7的倍数跳过
for (let i: number = 1; i <= 100; i++) {
  if (i % 7 == 0) {
    continue
  }
  console.log("打印1-100的数字，遇到7的倍数跳过", i)
}
// 需求2：打印1-100中的偶数，遇到20，后面的就不打印了
for (let i: number = 1; i <= 100; i++) {
  if (i % 2 == 0) {
    console.log("打印1-20中的，后面的就不打印了", i)
  }
  // 因为这个一个单分支，20首先会进入到上面的if所以我这里用>=
  else if (i >= 20) {
    break
  }
}

@Entry
@Component
struct Index {
  build() {

  }
}